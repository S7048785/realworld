<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.realworld.mapper.ArticleMapper">

    <select id="selectListArticleCard" resultType="com.realworld.vo.ArticleCardVO"
            parameterType="com.realworld.dto.ArticlePageQueryDTO">
        select
            a.id as id,
            a.title as title,
            a.description as `description`,
            (select (count(*)) from article_like where article_id = a.id and is_del = 0) as like_count,
            (select (count(*)) from article_favorites as af where article_id = a.id and is_del = 0) as favorites_count,
            a.created_at as created_at,
            user.username as author,
            user.nickname as nickname,
            user.avatar as avatar,
            GROUP_CONCAT(DISTINCT tags.name SEPARATOR ',') as tags,
            IFNULL((select 1 from article_like where user_id = 1 and article_id = a.id and is_del = 0), 0) as liked,
            IFNULL((select 1 from article_favorites where user_id = 1 and article_id = a.id and is_del = 0), 0) as favorited
        from article as a
            join user on a.author_id = user.id
        <if test="userId != null">
            join user_follow on a.author_id = user_follow.followed_user_id and user_follow.is_del = 0
        </if>
            left join article_tags as at on a.id = at.article_id and at.is_del = 0
            left join tags on at.tag_id = tags.id

        <where>
            <if test="userId != null">
                user.id != #{userId} and user_follow.user_id = 1 and
            </if>
            <if test="articlePageQueryDTO.username != null">
                user.username = #{articlePageQueryDTO.username} and
            </if>
        a.is_del = 0
        </where>
        GROUP BY
            a.id, a.title, a.description, a.created_at
        <if test="tagList != null">
            having
            <foreach collection="tagList" item="tag" separator="or" close="">
                tags like concat('%', #{tag}, '%')
            </foreach>
        </if>
        order by a.created_at desc
          limit #{articlePageQueryDTO.limit}, #{articlePageQueryDTO.offset}
    </select>


    <select id="selectArticle" resultType="com.realworld.vo.ArticleVO">
        select
            a.id as id,
            a.title as title,
            a.description as `description`,
            a.body as `body`,
            a.created_at as created_at,
            group_concat(DISTINCT t.name) as tags,

            (select COUNT(*) from article_like as al where al.article_id = a.id and al.is_del = 0) as like_count,
            (select COUNT(*) from article_favorites as af where af.article_id = a.id and af.is_del = 0) as favorites_count,
            (select COUNT(*) from article_comment as ac where ac.article_id = a.id and ac.is_del = 0) as comment_count

        from article as a
                 left join article_tags as at on a.id = at.article_id and at.is_del = 0
                 left join tags as t on at.tag_id = t.id
        where a.id = #{id} and a.is_del = 0

    </select>
    <select id="selectListLikedArticles" resultType="com.realworld.vo.ArticleCardVO"
            parameterType="com.realworld.dto.ArticlePageQueryDTO">
        select
            a.id as id,
            a.title as title,
            a.description as `description`,
            (select (count(*)) from article_like where article_id = a.id and is_del = 0) as like_count,
            a.created_at as created_at,
            user.username as author,
            user.avatar as avatar,
            GROUP_CONCAT(DISTINCT tags.name SEPARATOR ',') as tags,
            IFNULL((select 1 from article_like where user_id = #{articlePageQueryDTO.likerId} and article_id = a.id and is_del = 0), 0) as liked
        from article as a
                 join article_like as al on a.id = al.article_id and al.is_del = 0
                 join user on a.author_id = user.id
                 left join article_tags as at on a.id = at.article_id and at.is_del = 0
                 left join tags on at.tag_id = tags.id
        where  a.is_del = 0 and al.user_id = #{articlePageQueryDTO.likerId}
        GROUP BY
            a.id, a.title, a.description, a.created_at
        order by a.created_at desc
        limit #{articlePageQueryDTO.limit}, #{articlePageQueryDTO.offset};
    </select>
</mapper>